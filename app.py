import telebot
from telebot import types
import requests
import random
import psycopg2
from contextlib import closing
with closing(psycopg2.connect(dbname='films_bot', user='projectuser', password='password', host='localhost')) as conn:
    with conn.cursor() as cursor:
        cursor.execute('SELECT * FROM filmlist ')
        for row in cursor:
            print(row) 
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–¥
bot = telebot.TeleBot('7390621130:AAGaN0szPdQb2dFSxGwJargEDUcSnZggxI0')
api_key = "66c4bb59-6228-4ba6-a93e-90506aeb9bfe"
api_url = "https://kinopoiskapiunofficial.tech/api/v2.2/films/top?type=TOP_250_BEST_FILMS&page=1"
search_api_url = "https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword"

headers = {
    'X-API-KEY': api_key
}

films_data = []
watch_later_list = []
searched_films = []

def load_top_films():
    global films_data
    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        films_data = data.get('films', [])
        print(f"Loaded {len(films_data)} films.")
    else:
        print(f"Failed to load films: {response.status_code}")

load_top_films()

@bot.message_handler(commands=['start', 'main', 'hello'])
def start(message):
    button1 = types.InlineKeyboardButton("–¢–æ–ø —á–∞—Ä—Ç—ã üî•", callback_data='chart')
    button6 = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üî•", callback_data='research_film')
    button2 = types.InlineKeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üçø", callback_data='films')
    button3 = types.InlineKeyboardButton("–ú–æ—è —Ñ–∏–ª—å–º–æ–≥—Ä–∞—Ñ–∏—è üé¨", callback_data='watch')
    button4 = types.InlineKeyboardButton("–£–¥–∏–≤–∏ –º–µ–Ω—è ‚ú®", callback_data='surprise')
    button5 = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ üïê", callback_data='watch_later')

    markup = types.InlineKeyboardMarkup()
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button6)
    markup.add(button4, button5)

    user_first_name = str(message.chat.first_name)
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}", reply_markup = markup)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.message:
        global films_data
        if call.data == 'chart':
            response = requests.get(api_url, headers=headers)
            if response.status_code == 200:
                data = response.json()
                films_data = data['films'][:20]
                top_films = ""
                for i, film in enumerate(films_data, start=1):
                    genres = ", ".join([genre['genre'] for genre in film['genres']])
                    countries = ", ".join([country['country'] for country in film['countries']])
                    top_films += f"{i}. {film['nameRu']}\n–ì–æ–¥: {film['year']}\n–ñ–∞–Ω—Ä—ã: {genres}\n–°—Ç—Ä–∞–Ω—ã: {countries}\n\n"
                bot.send_message(call.message.chat.id, top_films)

                backButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
                selectButton = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º", callback_data='select_number')
                markup = types.InlineKeyboardMarkup()
                markup.add(backButton, selectButton)
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

            else:
                bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–∞—Ö.")

        elif call.data == 'back_to_menu':
            start(call.message)

        elif call.data == 'select_number':
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            bot.register_next_step_handler(msg, process_film_number)

        elif call.data == 'back_to_film_list':
            display_top_films(call.message)

        elif call.data == 'watch_later':
            display_watch_later(call.message)

        elif call.data.startswith('add_to_watch_later_'):
            add_to_watch_later(call)

        elif call.data == 'surprise':
            random_film(call.message)

        elif call.data == 'research_film':
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
            bot.register_next_step_handler(msg, search_film_by_keyword)

        elif call.data == 'information_surprise':
            get_film_details(call.message)
def display_top_films(message):
    top_films = ""
    for i, film in enumerate(films_data, start=1):
        genres = ", ".join([genre['genre'] for genre in film['genres']])
        countries = ", ".join([country['country'] for country in film['countries']])
        top_films += f"{i}. {film['nameRu']}\n–ì–æ–¥: {film['year']}\n–ñ–∞–Ω—Ä—ã: {genres}\n–°—Ç—Ä–∞–Ω—ã: {countries}\n\n"
    bot.send_message(message.chat.id, top_films)

    backButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
    selectButton = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º", callback_data='select_number')
    markup = types.InlineKeyboardMarkup()
    markup.add(backButton, selectButton)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def process_film_number(message):
    try:
        film_index = int(message.text) - 1
        if 0 <= film_index < len(films_data):
            film = films_data[film_index]
            film_details = get_film_details(film, message.chat.id)
            bot.send_message(message.chat.id, film_details)

            backButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_film_list')
            watchLaterButton = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ",
                                                          callback_data=f'add_to_watch_later_{film_index}')
            markup = types.InlineKeyboardMarkup()
            markup.add(backButton, watchLaterButton)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞")
            display_top_films(message)
            button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup = types.InlineKeyboardMarkup()
            markup.add(button_back)
            bot.send_message(message.chat.id, "–ù–∞–∑–∞–¥", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        display_top_films(message)
        markup.add(button_back)
        bot.send_message("–ù–∞–∑–∞–¥", reply_markup=markup)

def get_film_details(film, chat_id):
    film_id = film['filmId']
    api_url_details = f"https://kinopoiskapiunofficial.tech/api/v2.2/films/{film_id}"
    response = requests.get(api_url_details, headers=headers)

    if response.status_code == 200:
        data = response.json()
        film_details = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {film['nameRu']}\n"
            f"–ì–æ–¥: {film['year']}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {film.get('rating', 'N/A')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('filmLength', 'N/A')} –º–∏–Ω—É—Ç\n"
            f"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {data.get('ratingAgeLimits', 'N/A')}\n"
        )
        if 'posterUrl' in data:
            bot.send_photo(chat_id = chat_id, photo=data['posterUrl'])
        return film_details
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ."

def display_watch_later(message):
    if watch_later_list:
        watch_later_films = "–§–∏–ª—å–º—ã –≤ —Å–ø–∏—Å–∫–µ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ':\n"
        for film in watch_later_list:
            watch_later_films += f"{film['nameRu']} ({film['year']})\n"
        bot.send_message(message.chat.id, watch_later_films)
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        markup = types.InlineKeyboardMarkup()
        markup.add(button_back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ' –ø—É—Å—Ç.")
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        markup = types.InlineKeyboardMarkup()
        markup.add(button_back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def add_to_watch_later(call):
    film_index = int(call.data.split('_')[-1])
    if "searched" in call.data:
        film = searched_films[film_index]
    else:
        film = films_data[film_index]
    watch_later_list.append(film)
    bot.send_message(call.message.chat.id, f"–§–∏–ª—å–º '{film['nameRu']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ'.")

def random_film(message):
    if films_data:
        film = random.choice(films_data)
        film_index = films_data.index(film)
        genres = ", ".join([genre['genre'] for genre in film['genres']])
        countries = ", ".join([country['country'] for country in film['countries']])
        bot.send_message(message.chat.id, f"–°–æ–≤–µ—Ç—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: {film['nameRu']}\n–ì–æ–¥: {film['year']}\n–ñ–∞–Ω—Ä—ã: {genres}\n–°—Ç—Ä–∞–Ω—ã: {countries}")
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        button_information = types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="information_surprise")
        button_add_to_watch_later = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"add_to_watch_later_{film_index}")
        markup = types.InlineKeyboardMarkup()
        markup.add(button_information)
        markup.add(button_add_to_watch_later)
        markup.add(button_back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–∞—Ö.")
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        markup = types.InlineKeyboardMarkup()
        markup.add(button_back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

def search_film_by_keyword(message):
    keyword = message.text
    global searched_films
    response = requests.get(f"{search_api_url}?keyword={keyword}", headers=headers)
    if response.status_code == 200:
        data = response.json()
        searched_films = data.get('films', [])
        if searched_films:
            search_results = ""
            for i, film in enumerate(searched_films[:10], start=1):
                genres = ", ".join([genre['genre'] for genre in film['genres']])
                countries = ", ".join([country['country'] for country in film['countries']])
                search_results += f"{i}. {film['nameRu']}\n–ì–æ–¥: {film['year']}\n–ñ–∞–Ω—Ä—ã: {genres}\n–°—Ç—Ä–∞–Ω—ã: {countries}\n\n"
            bot.send_message(message.chat.id, search_results)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
            bot.register_next_step_handler(msg, process_search_film_number)
        else:
            bot.send_message(message.chat.id, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            start(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        start(message)


def process_search_film_number(message):
    try:
        film_index = int(message.text) - 1
        if 0 <= film_index < len(searched_films):
            film = searched_films[film_index]
            film_details = get_film_details(film, message.chat.id)
            bot.send_message(message.chat.id, film_details)

            backButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
            watchLaterButton = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f'add_to_watch_later_searched_{film_index}')
            markup = types.InlineKeyboardMarkup()
            markup.add(backButton, watchLaterButton)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞")
            search_film_by_keyword(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        search_film_by_keyword(message)

bot.polling(none_stop=True)
